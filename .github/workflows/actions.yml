# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  publish_tag:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3


      # Runs a set of commands using the runners shell
      - name: Run git-tag steps
        run: |
          echo 'Starting git-tags script'
          
          echo '-------------------------------------'
          echo 'Setting up git-credentials'
          echo '-------------------------------------'
          
          git config --global user.email "pipeline-tag@gmail.com"
          git config --global user.name "pipeline-tag"
          
          
          echo '-------------------------------------'
          echo 'Getting the list of git tags'
          echo '-------------------------------------'
          git_tags=$(git tag --sort=version:refname)
          git_latest_tag=$(echo "$git_tags" | tail -n 1)
          
          if [ -z "$git_latest_tag" ]; then
            git_latest_tag="v0.0.0"
          fi

          git_latest_tag=$(echo "$git_latest_tag" | sed 's/^v//')
          
          echo "GIT LIST TAGS"
          echo "$git_latest_tag"

          echo '-------------------------------------'
          echo 'Setting patch model and next version'
          echo '-------------------------------------'
          version_type="patch"
          version_next=""
          
          if [ "$version_type" = "patch" ]; then
            version_next="$(echo "$git_latest_tag" | awk -F. '{$NF++; print $1"."$2"."$NF}')"
          
          elif [ "$version_type" = "minor" ]; then
            version_next="$(echo "$git_latest_tag" | awk -F. '{$2++; $3=0; print $1"."$2"."$3}')"
          
          elif [ "$version_type" = "major" ]; then
            version_next="$(echo "$git_latest_tag" | awk -F. '{$1++; $2=0; $3=0; print $1"."$2"."$3}')"
          
          else
            printf "\nError: invalid version_type arg passed, must be 'patch', 'minor' or 'major'\n\n"
            exit 1
          
          fi
          
          echo "GIT PATCH TYPE"
          echo "$version_type"
          echo "$version_next"

          echo '-------------------------------------'
          echo 'Publishing tag in this repo'
          echo '-------------------------------------'
          commit_id_short=$(git rev-parse --short HEAD) || echo "Failed to get commit ID"
          commit_message=$(git log --format=%s -n 1 "${commit_id_short}") || echo "Failed to get commit message"
        
          git tag -a "v$version_next" "${commit_id_short}" -m "${commit_message}"
          git push origin "v$version_next"
